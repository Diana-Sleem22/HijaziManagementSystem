package application;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;
import java.util.concurrent.CountDownLatch;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.ParseException;

import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;

public class orderController implements Initializable {
	orderInvoice oi = null;
	@FXML
	private TableColumn<?, ?> orderAssignee;

	@FXML
	private TableColumn<?, ?> orderDate;

	@FXML
	private DatePicker orderForDate;

	@FXML
	private TableColumn<?, ?> orderNumber;

	@FXML
	private TableColumn<?, ?> orderOwner;
	@FXML
	private TableColumn<orderItemsDetails, Integer> QuantityColumn;

	@FXML
	private TableView<orderItemsDetails> orderItemsTable;

	@FXML
	private TableColumn<orderItemsDetails, Integer> priceColumn;

	@FXML
	private TableColumn<orderItemsDetails, String> productNameColumn;

	@FXML
	private TableColumn<orderItemsDetails, Integer> totalPriceColumn;
	@FXML
	private TableView<orderInvoice> ordersTable;
	private ObservableList<orderInvoice> data = FXCollections.observableArrayList();
	private ObservableList<orderItemsDetails> orderItems = FXCollections.observableArrayList();

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {

		try {
			getAllOrders();

			// TODO Auto-generated method stub
			if (orderNumber != null) {
				orderNumber.setCellValueFactory(new PropertyValueFactory("orderName"));
			}
			if (orderAssignee != null) {
				orderAssignee.setCellValueFactory(new PropertyValueFactory("assigneeName"));
			}
			if (orderOwner != null) {
				orderOwner.setCellValueFactory(new PropertyValueFactory("customerName"));
			}
			if (orderDate != null) {
				orderDate.setCellValueFactory(new PropertyValueFactory("date"));
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (ordersTable != null) {
			ordersTable.setOnMouseClicked((MouseEvent event) -> {
				if (event.getClickCount() > 1) {
					try {
						onEdit();
					} catch (IOException | ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			});
		}
	}

	void getAllOrders() throws IOException, ParseException {
		JSONObject responseAPI;

		responseAPI = CommonFunctions.sendHTTPRequest("http://localhost:8080/getOrders", "GET", "", "");
		JSONArray arr = (JSONArray) responseAPI.get("data");

		for (Object element : arr) {
			JSONObject new_obj = (JSONObject) element;

			data.add(new orderInvoice(Integer.parseInt(new_obj.get("id") + ""), "order#" + new_obj.get("id") + "",
					new_obj.get("assigneeName") + "", new_obj.get("customerName") + "", new_obj.get("date") + ""));
		}
		if (ordersTable != null) {
			ordersTable.setItems(data);
		}
	}

	public void onEdit() throws IOException, ParseException {
		// check the table's selected item and get selected item
		if (ordersTable.getSelectionModel().getSelectedItem() != null) {
			try {
				CountDownLatch latch = new CountDownLatch(1);

				FXMLLoader root = new FXMLLoader(getClass().getResource("orderItems.fxml"));
				Parent root1 = (Parent) root.load();
				Stage stage = new Stage();
				Scene s = new Scene(root1);
				stage.setScene(s);
				stage.setTitle("Customers");
				// Show the stage and count down the latch when it's shown
				Platform.runLater(() -> {
					stage.show();
					latch.countDown();
				});

				// Wait until the latch reaches zero
				latch.await();
				productNameColumn.setCellValueFactory(new PropertyValueFactory("productName"));
				QuantityColumn.setCellValueFactory(new PropertyValueFactory("quantity"));
				priceColumn.setCellValueFactory(new PropertyValueFactory("price"));
				totalPriceColumn.setCellValueFactory(new PropertyValueFactory("totalPriceUsd"));
				int id = ordersTable.getSelectionModel().getSelectedItem().getOrderID();
				JSONObject responseAPI;

				responseAPI = CommonFunctions.sendHTTPRequest("http://localhost:8080/getOrderItems", "GET", id + "",
						"");
				JSONArray arr = (JSONArray) responseAPI.get("data");

				for (Object element : arr) {
					JSONObject new_obj = (JSONObject) element;

					orderItems.add(new orderItemsDetails(Integer.parseInt(new_obj.get("quantity") + ""),
							Integer.parseInt(new_obj.get("price") + ""), new_obj.get("name") + ""));

				}
				orderItemsTable.setItems(orderItems);

			} catch (Exception e) {
				e.printStackTrace();
			}

		}
	}

}
