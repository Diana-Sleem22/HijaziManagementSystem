package application;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.ParseException;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
public class categoriesController implements Initializable{
	  @FXML
	    private TextField catName;

	    @FXML
	    private TableColumn<CategoryModel, String> categoryNameColumn;

	    @FXML
	    private TableView<CategoryModel> categoryTable;
	    CategoryModel selectedCategory;
	    @FXML
	    private TextField searchtxt;
	    private ObservableList<CategoryModel> data =  FXCollections.observableArrayList();
	    @FXML
	    void addCategory(ActionEvent event) throws IOException, ParseException{
	    	CategoryModel cm = new CategoryModel(catName.getText());
	     CommonFunctions.sendHTTPRequest("http://localhost:8080/registerCategory", "POST","", cm.toString());
	    	data.add( new CategoryModel(catName.getText().toString()));
	    	categoryTable.setItems(data);
	    	catName.setText("");

	    }

	    @FXML
	    void deleteCategory(ActionEvent event) throws IOException, ParseException {
	    	CategoryModel cm = new CategoryModel( Integer.parseInt(selectedCategory.getId()+""),catName.getText());
	    	System.out.println(cm);
			 CommonFunctions.sendHTTPRequest("http://localhost:8080/deleteCategory", "DELETE",selectedCategory.getId()+"" , cm.toString());
			int index = data.indexOf(selectedCategory);
			data.remove(index);

			categoryTable.setItems(data);
			catName.setText("");
	    }

	    @FXML
	    void updateCategory(ActionEvent event)  throws IOException, ParseException {
	    	CategoryModel cm = new CategoryModel( Integer.parseInt(selectedCategory.getId()+""),catName.getText());
	    	System.out.println(cm);
			 CommonFunctions.sendHTTPRequest("http://localhost:8080/updateCategory", "PUT", "", cm.toString());
			int index = data.indexOf(selectedCategory);
			data.remove(index);
			data.add(index, cm);
			categoryTable.setItems(data);
			catName.setText("");
	    }
		@Override
		public void initialize(URL arg0, ResourceBundle arg1) {
			data.clear();
			categoryNameColumn.setCellValueFactory(new PropertyValueFactory("name"));
			searchtxt.textProperty().addListener((observable, oldValue, newValue) -> {
				try {
					 searchCategoryByName (newValue);
				} catch (IOException | ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		    });
			try {
				JSONObject responseAPI = CommonFunctions.sendHTTPRequest("http://localhost:8080/getAllCategories", "GET", "", "");


		        JSONArray arr = (JSONArray) responseAPI.get("data");



		        for (Object element : arr) {
		        	  JSONObject new_obj = (JSONObject) element;


					data.add(new CategoryModel(Integer.parseInt(new_obj.get("id").toString()), new_obj.get("name").toString()));
				}
				System.out.print(data);

				 categoryTable.setItems(data);
				 categoryTable.setOnMouseClicked((MouseEvent event) -> {
				    if (event.getClickCount() > 1) {
				        onEdit();
				    }
				});
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}


	}
		 public void searchCategoryByName (String text) throws IOException, ParseException {
			 String url = "";
			 if(text.equals("")) {
				 url = "http://localhost:8080/getAllCategories";
			 }
			 else {
				 url = "http://localhost:8080/searchCategories";
			 }
		    	JSONObject responseAPI = CommonFunctions.sendHTTPRequest(url, "GET", text, "");


		        JSONArray arr = (JSONArray) responseAPI.get("data");
		        data.clear();


		        for (Object element : arr) {
		        	  JSONObject new_obj = (JSONObject) element;


					data.add(new CategoryModel(Integer.parseInt(new_obj.get("id").toString()), new_obj.get("name").toString()));
				}
				System.out.print(data);

				 categoryTable.setItems(data);
		    }
		public void onEdit() {
		    // check the table's selected item and get selected item
		    if ( categoryTable.getSelectionModel().getSelectedItem() != null) {

		    	selectedCategory= categoryTable.getSelectionModel().getSelectedItem();
		        catName.setText(selectedCategory.getName());

		    }
		}


}
