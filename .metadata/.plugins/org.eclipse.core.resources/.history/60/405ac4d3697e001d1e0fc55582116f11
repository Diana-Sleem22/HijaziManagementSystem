package application;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.json.simple.parser.ParseException;

import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;

public class RegistrationController implements Initializable {

    @FXML
    private CheckBox admin;

    @FXML
    private PasswordField confirmpassword;

    @FXML
    private TextField email;

    @FXML
    private TextField firstname;

    @FXML
    private TextField lastname;


    @FXML
    private PasswordField password;

    @FXML
    private CheckBox seller;
    @FXML
    private Button registerBtn;
    @FXML
    private Label usertype;
    
    @FXML
    private Label lname;

    @FXML
    private Label mail;

    @FXML
    private Label pass;
    @FXML
    private Label confirmpass;

    @FXML
    private Label fname;
    @FXML
    private Label checkpass;

    public static void main(String[] args) {}
    @Override
	public void initialize(URL arg0, ResourceBundle arg1) {
    	admin.selectedProperty().addListener(
			      (ObservableValue<? extends Boolean> ov, Boolean old_val, Boolean new_val) -> {
			    	  if(new_val) {
			    		  seller.setSelected(false);

			    		}
			      });

    	seller.selectedProperty().addListener(
			      (ObservableValue<? extends Boolean> ov, Boolean old_val, Boolean new_val) -> {
			    	  if(new_val) {
			    		  admin.setSelected(false);

			    		}
			      });

    }



    @FXML
    void registerUser(ActionEvent event) throws IOException, ParseException {
    	if(email.getText().isEmpty()) {
    		mail.setText("required");
    	}
    if(password.getText().isEmpty()) {
    	 pass.setText("required");
    	}
    	if(!password.getText().equals(confirmpassword.getText())){
checkpass.setText("passwords are not matched");
    	}
    	if(confirmpass.getText().isEmpty()) {
    		confirmpass.setText("");
    	}
    	if(firstname.getText().isEmpty()) {
    		  fname.setText("required");
    	}
  if(lastname.getText().isEmpty()) {
	  lname.setText("required");
    	}
  if(isValidEmail(email.getText())) {
	  
  }
else {
	Alert alert = new Alert(AlertType.INFORMATION);
	alert.setTitle("Success");
	alert.setHeaderText("Operation successful");
	alert.setContentText("User Added successfully.");

	alert.showAndWait();

	alert.showAndWait();
    	UserModel user = new UserModel(firstname.getText(), lastname.getText(), email.getText(), "" , "" , password.getText(), admin.isSelected() ? 1 : 3);
		 CommonFunctions.sendHTTPRequest("http://localhost:8080/registerUser", "POST","" , user.toString());
		 firstname.setText("");
		 lastname.setText("");
		 password.setText("");
		 email.setText("");
		 confirmpassword.setText("");

		 admin.setSelected(false);
		 seller.setSelected(false);


}

    }
    public static boolean isValidPassword(String password) {
	    String regex = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\w\\s]).{8,16}$";
	    Pattern pattern = Pattern.compile(regex);
	    Matcher matcher = pattern.matcher(password);
	    return matcher.matches();
	}
	
	public static boolean isValidEmail(String email) {
	    String regex = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
	    Pattern pattern = Pattern.compile(regex);
	    Matcher matcher = pattern.matcher(email);
	    return matcher.matches();
	}
}
