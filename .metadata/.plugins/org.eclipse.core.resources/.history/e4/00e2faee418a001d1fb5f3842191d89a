package application;

import java.io.IOException;

import javafx.util.Callback;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import java.util.stream.Collectors;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.ParseException;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.TableColumn;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;

public class productsController implements Initializable {

	@FXML
	private Button category;
	@FXML
	private ComboBox<CategoryModel> categoryData;
	@FXML
	private ComboBox<CompanyModel> companyData;
	ArrayList companies = new ArrayList<String>();
	List<CategoryModel> categories = new ArrayList<CategoryModel>();
	List<SupplierModel> suppliers = new ArrayList<SupplierModel>();

	@FXML
	private ComboBox<SupplierModel> supplierData;
	@FXML
	private Button add_product;
	@FXML
	private TextField product_name;

	@FXML
	private TextField product_price;

	@FXML
	private TextField product_qty;
	@FXML
	private TextField barcode;
	@FXML
	private TableColumn<ProductModel, String> barcodeColumn;
	@FXML
	private TableColumn<ProductModel, Integer> categoryColumn;
	@FXML
	private TableColumn<ProductModel, Integer> companyColumn;
	@FXML
	private TableColumn<ProductModel, String> nameColumn;

	@FXML
	private TableColumn<ProductModel, Integer> priceColumn;
	@FXML
	private TableColumn<ProductModel, Integer> qtyColumn;

	@FXML
	private TableColumn<ProductModel, Integer> supplierColumn;
	@FXML
	private TableView<ProductModel> productsTable;

	private ObservableList<CategoryModel> data = FXCollections.observableArrayList();
	private ObservableList<ProductModel> productsData = FXCollections.observableArrayList();

	@FXML
	void addCategory(javafx.event.ActionEvent actionEvent) throws IOException {
		try {
			FXMLLoader root = new FXMLLoader(getClass().getResource("Categories.fxml"));
			Parent root1 = (Parent) root.load();
			Stage stage = new Stage();
			stage.setScene(new Scene(root1));
			stage.setTitle("Categories");
			stage.show();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void categoryData() {
		try {
			JSONObject responseAPI = CommonFunctions.sendHTTPRequest("http://localhost:8080/getAllCategories", "GET",
					"", "");
			JSONArray arr = (JSONArray) responseAPI.get("data");
			for (Object element : arr) {
				JSONObject new_obj = (JSONObject) element;
				categoryData.getItems().add(new CategoryModel(Integer.parseInt(new_obj.get("id").toString()),
						new_obj.get("name").toString()));
				categories.add(new CategoryModel(Integer.parseInt(new_obj.get("id").toString()),
						new_obj.get("name").toString()));
			}
			categoryData.setCellFactory(new Callback<ListView<CategoryModel>, ListCell<CategoryModel>>() {

				@Override
				public ListCell<CategoryModel> call(ListView<CategoryModel> p) {

					final ListCell<CategoryModel> cell = new ListCell<CategoryModel>() {

						@Override
						protected void updateItem(CategoryModel t, boolean bln) {
							super.updateItem(t, bln);

							if (t != null) {
								setText(t.name);
							} else {
								setText(null);
							}
						}

					};

					return cell;
				}
			});

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void companyData() {
		try {

			JSONObject responseAPI = CommonFunctions.sendHTTPRequest("http://localhost:8080/getAllCompanies", "GET", "",
					"");
			JSONArray arr = (JSONArray) responseAPI.get("data");
			JSONArray arr2 = (JSONArray) responseAPI.get("data");
			for (int i = 0; i < arr2.size(); i++) {
				JSONObject new_obj2 = (JSONObject) arr2.get(i);
				companies.add(Integer.parseInt(new_obj2.get("id").toString()), new_obj2.get("name") + "");
				companyData.getItems().add(new CompanyModel(new_obj2.get("name").toString(),
						new_obj2.get("phone").toString(), Integer.parseInt(new_obj2.get("id").toString())));
			}
			System.out.println(companies);
			companyData.setCellFactory(new Callback<ListView<CompanyModel>, ListCell<CompanyModel>>() {

				@Override
				public ListCell<CompanyModel> call(ListView<CompanyModel> p) {

					final ListCell<CompanyModel> cell = new ListCell<CompanyModel>() {

						@Override
						protected void updateItem(CompanyModel t, boolean bln) {
							super.updateItem(t, bln);

							if (t != null) {
								setText(t.name);
							} else {
								setText(null);
							}
						}

					};

					return cell;
				}
			});

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void supplierData() {
		try {
			JSONObject responseAPI = CommonFunctions.sendHTTPRequest("http://localhost:8080/getAllSuppliers", "GET", "",
					"");
			JSONArray arr = (JSONArray) responseAPI.get("data");
			for (Object element : arr) {
				JSONObject new_obj = (JSONObject) element;
				supplierData.getItems()
						.add(new SupplierModel(new_obj.get("firstname").toString(), new_obj.get("lastname").toString(),
								new_obj.get("phoneNumber").toString(), Integer.parseInt(new_obj.get("id").toString())));
				suppliers.add(new SupplierModel(new_obj.get("firstname").toString(), new_obj.get("lastname").toString(),
						new_obj.get("phoneNumber").toString(), Integer.parseInt(new_obj.get("id").toString())));
			}
			supplierData.setCellFactory(new Callback<ListView<SupplierModel>, ListCell<SupplierModel>>() {

				@Override
				public ListCell<SupplierModel> call(ListView<SupplierModel> p) {

					final ListCell<SupplierModel> cell = new ListCell<SupplierModel>() {

						@Override
						protected void updateItem(SupplierModel t, boolean bln) {
							super.updateItem(t, bln);

							if (t != null) {
								setText(t.firstname);
							} else {
								setText(null);
							}
						}

					};

					return cell;
				}
			});

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void productsData() {

		JSONObject responseAPI;
		try {
			responseAPI = CommonFunctions.sendHTTPRequest("http://localhost:8080/getAllProducts", "GET", "", "");
			JSONArray arr = (JSONArray) responseAPI.get("data");

			for (int i = 0; i < arr.size(); i++) {
				JSONObject new_obj = (JSONObject) arr.get(i);

				productsData.add(new ProductModel(new_obj.get("name").toString(), new_obj.get("barcode").toString(),
						Integer.parseInt(new_obj.get("quantity") + ""), Integer.parseInt(new_obj.get("price") + ""),
						new_obj.get("companyFK") + "", Integer.parseInt(new_obj.get("categoryFK") + ""), -1));
			}
			productsTable.setItems(productsData);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	@FXML
	void addProduct(ActionEvent event) throws IOException, ParseException {
		ProductModel sm = new ProductModel(product_name.getText(), barcode.getText(),
				Integer.parseInt(product_qty.getText()), Integer.parseInt(product_price.getText()),
				companyData.getValue().getId() + "", categoryData.getValue().getId());
		System.out.println(sm.toString());
		JSONObject response = CommonFunctions.sendHTTPRequest("http://localhost:8080/registerProduct", "POST", "",
				sm.toString());

		int productAddedID = Integer
				.parseInt(((JSONObject) ((JSONObject) ((JSONArray) (response.get("data"))).get(0)).get("product"))
						.get("id").toString());
		ProductSupplierModel psm = new ProductSupplierModel(productAddedID, supplierData.getValue().getId());
		CommonFunctions.sendHTTPRequest("http://localhost:8080/registerProductSupplier", "POST", "", psm.toString());
		sm.setSupplierFK(supplierData.getValue().getId());
		productsData.add(sm);
		productsTable.setItems(productsData);
	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		barcodeColumn.setCellValueFactory(new PropertyValueFactory("barcode"));
		categoryColumn.setCellValueFactory(new PropertyValueFactory("categoryFK"));
		companyColumn.setCellValueFactory(new PropertyValueFactory("companyFK"));
		nameColumn.setCellValueFactory(new PropertyValueFactory("name"));
		priceColumn.setCellValueFactory(new PropertyValueFactory("price"));
		qtyColumn.setCellValueFactory(new PropertyValueFactory("quantity"));
		supplierColumn.setCellValueFactory(new PropertyValueFactory("supplierFK"));
		productsData();
		categoryData();
		companyData();
		supplierData();
		for(int  i = 0 ; i < productsData.size() ; i++) {
			int index = companies.indexOf(new CompanyModel("", "", Integer.parseInt(productsData.get(i).getCompanyFK() + "")));
			productsData.get(i).setCompanyFK(companies.get(i));
		}
		productsTable.setItems(productsData);
	}
}
