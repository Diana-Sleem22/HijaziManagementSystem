package application;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.ParseException;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;

public class supplierController implements Initializable {
	@FXML
	private TextField firstname;

	@FXML
	private TableColumn<SupplierModel, String> firstnameColumn;

	@FXML
	private TextField lastname;

	@FXML
	private TableColumn<SupplierModel, String> lastnameColumn;

	@FXML
	private TextField phoneNumber;

	@FXML
	private TableColumn<SupplierModel, String> phonenumberColumn;

	@FXML
	private TextField searchtxt;
	SupplierModel2 selectedSupplier;
	@FXML
	private TableView<SupplierModel2> supplierTable;
	private ObservableList<SupplierModel2> data = FXCollections.observableArrayList();

	@FXML
	void addSupplier(ActionEvent event) throws IOException, ParseException {
		String first = firstname.getText();
		String last = lastname.getText();
		String phone = phoneNumber.getText();
		if (first.isEmpty() || last.isEmpty() || phone.isEmpty()) {
			Alert alert = new Alert(AlertType.ERROR);
			alert.setTitle("Error");
			alert.setHeaderText("Operation Failed");
			alert.setContentText("Missing Fields");

			alert.showAndWait();
		} else {

			SupplierModel2 sm = new SupplierModel2(firstname.getText(), lastname.getText(), phoneNumber.getText());
			JSONObject response = CommonFunctions.sendHTTPRequest("http://localhost:8080/registerUser", "POST", "",
					sm.toString());
			JSONObject responseData = (JSONObject) ((JSONArray) (response.get("data"))).get(0);
			if (Integer.parseInt(responseData.get("responseCode") + "") == 302) {
				Alert alert2 = new Alert(AlertType.ERROR);
				alert2.setTitle("Error");
				alert2.setHeaderText("Operation Failed");
				alert2.setContentText("User Already Found");
				alert2.showAndWait();

			} else {
				Alert alert = new Alert(AlertType.INFORMATION);
				alert.setTitle("Success");
				alert.setHeaderText("Operation Successfull");
				alert.setContentText("Supplier added Successfully");

				alert.showAndWait();
				int userAddedID = Integer
						.parseInt(((JSONObject) ((JSONObject) ((JSONArray) (response.get("data"))).get(0)).get("user"))
								.get("id").toString());
				data.add(new SupplierModel2(firstname.getText().toString(), lastname.getText().toString(),
						phoneNumber.getText().toString(), userAddedID));
				supplierTable.setItems(data);
				firstname.setText("");
				lastname.setText("");
				phoneNumber.setText("");
				Alert alert = new Alert(AlertType.INFORMATION);
				alert.setTitle("Success");
				alert.setHeaderText("Operation Successfull");
				alert.setContentText("Supplier added Successfully");

				alert.showAndWait();
			}

		}
	}

	@FXML
	void deleteSupplier(ActionEvent event) throws IOException, ParseException {
		SupplierModel2 cm = new SupplierModel2(firstname.getText(), lastname.getText(), phoneNumber.getText(),
				Integer.parseInt(selectedSupplier.getId() + ""));
		CommonFunctions.sendHTTPRequest("http://localhost:8080/deleteUser", "DELETE", selectedSupplier.getId() + "",
				cm.toString());
		int index = data.indexOf(selectedSupplier);
		data.remove(index);

		supplierTable.setItems(data);
	}

	@FXML
	void updateSupplier(ActionEvent event) throws IOException, ParseException {
		Alert alert = new Alert(AlertType.INFORMATION);
		alert.setTitle("Success");
		alert.setHeaderText("Operation Successfull");
		alert.setContentText("Supplier updated Successfully");

		alert.showAndWait();

		SupplierModel2 cm = new SupplierModel2(firstname.getText(), lastname.getText(), phoneNumber.getText(),
				Integer.parseInt(selectedSupplier.getId() + ""));
		JSONObject response = CommonFunctions.sendHTTPRequest("http://localhost:8080/updateUser", "PUT", "",
				cm.toString());
		JSONObject responseData = (JSONObject) ((JSONArray) (response.get("data"))).get(0);
		if (Integer.parseInt(responseData.get("responseCode") + "") == 302) {
			Alert alert2 = new Alert(AlertType.ERROR);
			alert2.setTitle("Error");
			alert2.setHeaderText("Operation Failed");
			alert2.setContentText("User Already Found");
			alert2.showAndWait();
		} else if(!responseData.equals(responseData)) {
			Alert alert2 = new Alert(AlertType.INFORMATION);
			alert.setTitle("Success");
			alert.setHeaderText("Operation Successfull");
			alert.setContentText("Supplier updated Successfully");

			alert.showAndWait();
			int index = data.indexOf(selectedSupplier);
			data.remove(index);
			data.add(index, cm);
			supplierTable.setItems(data);
		}

	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		data.clear();
		firstnameColumn.setCellValueFactory(new PropertyValueFactory("firstname"));
		lastnameColumn.setCellValueFactory(new PropertyValueFactory("lastname"));
		phonenumberColumn.setCellValueFactory(new PropertyValueFactory("phoneNumber"));
		searchtxt.textProperty().addListener((observable, oldValue, newValue) -> {
			try {
				searchSupplierByName(newValue);
			} catch (IOException | ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		});
		try {
			JSONObject responseAPI = CommonFunctions.sendHTTPRequest("http://localhost:8080/getAllSuppliers", "GET", "",
					"");

			JSONArray arr = (JSONArray) responseAPI.get("data");

			for (Object element : arr) {
				JSONObject new_obj = (JSONObject) element;

				data.add(new SupplierModel2(new_obj.get("firstname").toString(), new_obj.get("lastname").toString(),
						new_obj.get("phoneNumber").toString(), Integer.parseInt(new_obj.get("id").toString())));
			}
			System.out.print(data);

			supplierTable.setItems(data);

			supplierTable.setOnMouseClicked((MouseEvent event) -> {
				if (event.getClickCount() > 1) {
					onEdit();
				}
			});
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void searchSupplierByName(String text) throws IOException, ParseException {
		String url = "";
		if (text.equals("")) {
			url = "http://localhost:8080/getAllSuppliers";
		} else {
			url = "http://localhost:8080/searchSupplier";
		}
		JSONObject responseAPI = CommonFunctions.sendHTTPRequest(url, "GET", text, "");

		JSONArray arr = (JSONArray) responseAPI.get("data");
		data.clear();

		for (Object element : arr) {
			JSONObject new_obj = (JSONObject) element;

			data.add(new SupplierModel2(new_obj.get("firstname").toString(), new_obj.get("lastname").toString(),
					new_obj.get("phoneNumber").toString(), Integer.parseInt(new_obj.get("id").toString())));
		}

		supplierTable.setItems(data);
	}

	public void onEdit() {
		// check the table's selected item and get selected item
		if (supplierTable.getSelectionModel().getSelectedItem() != null) {

			selectedSupplier = supplierTable.getSelectionModel().getSelectedItem();
			firstname.setText(selectedSupplier.getFirstname());
			lastname.setText(selectedSupplier.getLastname());
			phoneNumber.setText(selectedSupplier.getPhoneNumber());
		}
	}

}
